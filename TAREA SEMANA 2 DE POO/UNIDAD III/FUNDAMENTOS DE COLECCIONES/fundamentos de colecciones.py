import json

# Clase Producto: Representa los art√≠culos dentro del inventario
class Producto:
    def __init__(self, id_producto, nombre, cantidad, precio):
        # Cada producto tiene un identificador √∫nico, un nombre, una cantidad y un precio
        self.id_producto = id_producto
        self.nombre = nombre
        self.cantidad = cantidad
        self.precio = precio

    def __repr__(self):
        # Muestra los detalles del producto de forma clara al imprimir
        return f"ID: {self.id_producto} | {self.nombre} | Cantidad: {self.cantidad} | Precio: ${self.precio:.2f}"

    def a_diccionario(self):
        # Convierte el producto en un diccionario para facilitar la serializaci√≥n
        return {
            'id_producto': self.id_producto,
            'nombre': self.nombre,
            'cantidad': self.cantidad,
            'precio': self.precio
        }

# Clase Inventario: Gestiona los productos utilizando un diccionario
class Inventario:
    def __init__(self):
        # Usamos un diccionario donde las claves son los IDs de los productos
        self.productos = {}

    def agregar_producto(self, producto):
        # Agrega un producto si no existe un producto con el mismo ID
        if producto.id_producto in self.productos:
            print("‚ö†Ô∏è Error: Ya existe un producto con ese ID.")
        else:
            self.productos[producto.id_producto] = producto
            print(f"‚úÖ Producto '{producto.nombre}' a√±adido correctamente.")

    def eliminar_producto(self, id_producto):
        # Elimina un producto si el ID est√° registrado
        if id_producto in self.productos:
            producto_eliminado = self.productos.pop(id_producto)
            print(f"üóëÔ∏è Producto '{producto_eliminado.nombre}' eliminado del inventario.")
        else:
            print("‚ùå Error: No se encontr√≥ un producto con ese ID.")

    def actualizar_producto(self, id_producto, cantidad=None, precio=None):
        # Actualiza la cantidad o el precio de un producto existente
        if id_producto in self.productos:
            producto = self.productos[id_producto]
            if cantidad is not None:
                producto.cantidad = cantidad
            if precio is not None:
                producto.precio = precio
            print(f"üîÑ Producto '{producto.nombre}' actualizado con √©xito.")
        else:
            print("‚ùå Error: No se puede actualizar un producto que no existe.")

    def buscar_por_nombre(self, nombre):
        # Busca productos que coincidan con el nombre (sin distinguir may√∫sculas/min√∫sculas)
        encontrados = [p for p in self.productos.values() if p.nombre.lower() == nombre.lower()]
        if encontrados:
            print("üîç Productos encontrados:")
            for producto in encontrados:
                print(producto)
        else:
            print("‚ùå No se encontraron productos con ese nombre.")

    def mostrar_todos(self):
        # Muestra todos los productos del inventario
        if self.productos:
            print("üì¶ Inventario Completo:")
            for producto in self.productos.values():
                print(producto)
        else:
            print("üì≠ El inventario est√° vac√≠o.")

    def guardar_en_archivo(self, archivo):
        # Guarda el inventario actual en un archivo JSON
        try:
            with open(archivo, 'w') as f:
                json.dump([p.a_diccionario() for p in self.productos.values()], f, indent=4)
            print("üíæ Inventario guardado exitosamente.")
        except Exception as e:
            print(f"‚ùå Error al guardar el archivo: {e}")

    def cargar_desde_archivo(self, archivo):
        # Carga el inventario desde un archivo JSON
        try:
            with open(archivo, 'r') as f:
                productos = json.load(f)
                for p in productos:
                    self.agregar_producto(Producto(**p))
            print("üìÇ Inventario cargado correctamente.")
        except FileNotFoundError:
            print("‚ö†Ô∏è Archivo no encontrado. Se crear√° uno nuevo al guardar.")
        except Exception as e:
            print(f"‚ùå Error al cargar el archivo: {e}")

# Funci√≥n principal: Men√∫ interactivo para gestionar el inventario
def menu():
    inventario = Inventario()
    inventario.cargar_desde_archivo('inventario.json')

    # Productos predefinidos al iniciar el programa si el archivo no existe
    if not inventario.productos:
        print("üì• Cargando inventario inicial...")
        productos_iniciales = [
            Producto("001", "Laptop", 10, 750.00),
            Producto("002", "Mouse", 50, 25.00),
            Producto("003", "Teclado", 30, 45.50),
            Producto("004", "Monitor", 20, 150.75),
            Producto("005", "Auriculares", 40, 60.00)
        ]
        for p in productos_iniciales:
            inventario.agregar_producto(p)

    while True:
        print("\nüìä Sistema Avanzado de Gesti√≥n de Inventarios")
        print("1. A√±adir un nuevo producto")
        print("2. Eliminar un producto")
        print("3. Actualizar un producto")
        print("4. Buscar producto por nombre")
        print("5. Mostrar todos los productos")
        print("6. Guardar y salir")

        opcion = input("üî¢ Elige una opci√≥n: ")

        if opcion == '1':
            id_producto = input("üÜî Introduce el ID del producto: ")
            nombre = input("üìõ Nombre del producto: ")
            try:
                cantidad = int(input("üì¶ Cantidad disponible: "))
                precio = float(input("üí∞ Precio del producto: "))
                inventario.agregar_producto(Producto(id_producto, nombre, cantidad, precio))
            except ValueError:
                print("‚ùå Error: Aseg√∫rate de ingresar valores num√©ricos para cantidad y precio.")

        elif opcion == '2':
            id_producto = input("üÜî ID del producto a eliminar: ")
            inventario.eliminar_producto(id_producto)

        elif opcion == '3':
            id_producto = input("üÜî ID del producto a actualizar: ")
            cantidad = input("üì¶ Nueva cantidad (dejar vac√≠o para no cambiar): ")
            precio = input("üí∞ Nuevo precio (dejar vac√≠o para no cambiar): ")
            inventario.actualizar_producto(
                id_producto,
                cantidad=int(cantidad) if cantidad else None,
                precio=float(precio) if precio else None
            )

        elif opcion == '4':
            nombre = input("üìõ Nombre del producto a buscar: ")
            inventario.buscar_por_nombre(nombre)

        elif opcion == '5':
            inventario.mostrar_todos()

        elif opcion == '6':
            inventario.guardar_en_archivo('inventario.json')
            print("üëã ¬°Gracias por usar el sistema de gesti√≥n de inventarios!")
            break

        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, elige una opci√≥n del men√∫.")

if __name__ == '__main__':
    menu()
